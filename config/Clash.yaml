#========= 基本配置 =========#
# >>>>>>>>订阅填写-> 99 行

port: 7890           # HTTP 代理端口
socks-port: 7891     # Socks 端口
mixed-port: 7892     # 混合端口
redir-port: 7893     # Redir 端口
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true      # 允许局域网连接
mode: rule           # 规则模式
log-level: info      # 日志级别
ipv6: true           # IPV6开关
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb'
  asn: 'https://gitlab.com/Loon0x00/loon_data/-/raw/main/geo/GeoLite2-ASN.mmdb'

#  > 配置文件存储选项
profile:
  store-selected: true
  store-fake-ip: true

#  > 流量嗅探配置
sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

#  > TUN 配置
tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

#  > DNS 配置
dns:
  enable: true         # 不使用系统 DNS
  listen: 0.0.0.0:1053 # dns 监听
  ipv6: true           # 关闭 IPV6
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:        # 默认 DNS 服务
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true


#========= 建立锚点 =========#

# 策略组引用
pr:   &a3 {type: select,   proxies: [香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点] }
p:    &a1 {type: http,     interval: 86400,  health-check: {enable: true, url: http://www.gstatic.com/generate_204, interval: 1800} }
auto: &a4 {type: url-test, lazy: true,  url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe] }
use:  &a2 {type: select,   use: [Subscribe] }
c:    &a6 {type: http,     behavior: classical, interval: 86400}
d:    &a5 {type: http,     behavior: domain,    interval: 86400}
i:    &a7 {type: http,     behavior: ipcidr,    interval: 86400}

proxy-providers:
  Subscribe:
    <<: *a1
    url: https://Subscribe.com  #url:后填写你的订阅地址
    path: ./Subscribe/Subscribe.yaml
    # URL后面填写格式1: 直接填写你的机场Clash订阅[单一订阅][推荐此种方式，避免订阅泄露]
    # URL后面填写格式2：https://sub.xeton.dev/sub?target=clash&url=请手动填入你的订阅[多机场订阅用|分割即可]&list=true&udp=false  
    
proxies: null
proxy-groups:
#分流分组
  - {name: Proxies, type: select, proxies: [香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: Apple, type: select, proxies: [DIRECT, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: Microsoft, type: select, proxies: [DIRECT, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: Steam, type: select, proxies: [DIRECT, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: Spotify, type: select, proxies: [DIRECT, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: BiliBili, type: select, proxies: [DIRECT, 香港节点, 台湾节点]}
  - {name: Netflix, type: select, proxies: [台湾节点, 香港节点, 日本节点, 狮城节点, 美国节点, 其它节点]}
  - {name: AdBlock, type: select, proxies: [REJECT,DIRECT]}

#节点分组
  - {name: 香港节点, <<: *a2, filter: "港|香港|湾仔|港仔|九龙|广港|🇭🇰|hong|HK|HongKong|HKG|(?i)Hong"           }             # a4更改为a2，即为手动选择
  - {name: 台湾节点, <<: *a2, filter: "台|台湾|台灣|台北|新竹|台中|桃园|台南|高雄|花莲|广台|🇨🇳|TW|Tai|Taiwan|(?i)Taiwan"      }             # a4更改为a2，即为手动选择
  - {name: 日本节点, <<: *a2, filter: "日本|东京|大阪|名古屋|福冈|仙台|京都|川日|泉日|埼玉|沪日|深日|广日|🇯🇵|JP|Japan|(?i)Japan"     }             # a4更改为a2，即为手动选择     
  - {name: 狮城节点, <<: *a2, filter: "狮城|坡|新加坡|广新|🇸🇬|SG|Singapore|(?i)Singapore"    }            # a4更改为a2，即为手动选择
  - {name: 美国节点, <<: *a2, filter: "美|美国|广美|纽约|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|华盛顿|内华达|蒙大纳|怀俄明州|菲尼克斯|阿尔伯克基|丹佛|哥伦比亚|🇺🇸|US|United States|(?i)States|American"}             # a4更改为a2，即为手动选择
  - {name: 其它节点, <<: *a2, filter: "(?i)^(?!.*(?:防止|倒卖|通知|贩卖|工单|联系|已用|过期|备用|版本|下次|机场|到期|官址|流量|订阅|获取|客服|循环|返利|邀请|中国|国内|大陆|港|台|狮|日本|新加坡|美国|网易|洛|拉|谷|勒|凤|费|圣|东|埼|群|网址|网站|官方|无法|公告|一元|距离|邮箱|套餐|节点版本|@|🇨🇳|🇭🇰|🇺🇸|🇸🇬|🇯🇵|🇹🇼)).*"}  

# 分流规则 
rule-providers:
  Anti:        {<<: *a5 , url: https://anti-ad.net/clash.yaml ,                                                                            path: ./RuleSet/Anti.yaml        }
  Direct:      {<<: *a5 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Direct/Direct.yaml ,             path: ./RuleSet/Direct.yaml      }
  Lan:         {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml ,                   path: ./RuleSet/Lan.yaml         }
  Download:    {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Download/Download.yaml ,         path: ./RuleSet/Download.yaml    }
  Apple:       {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Apple/Apple_Classical.yaml,      path: ./ruleset/Apple.yaml       }
  Microsoft:   {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml ,       path: ./RuleSet/Microsoft.yaml   }
  BiliBili:    {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/BiliBili/BiliBili.yaml,          path: ./ruleset/BiliBili.yaml    }
  Spotify:     {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@release/rule/Clash/Spotify/Spotify.yaml ,          path: ./RuleSet/Spotify.yaml     }
  Steam:       {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@release/rule/Clash/Steam/Steam.yaml ,              path: ./RuleSet/Steam.yaml       }
  OpenAI:      {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@release/rule/Clash/OpenAI/OpenAI.yaml ,            path: ./RuleSet/OpenAI.yaml      }
  Github:      {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml ,             path: ./RuleSet/Github.yaml      }
  Google:      {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml ,             path: ./RuleSet/Google.yaml      }
  Telegram:    {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml ,         path: ./RuleSet/Telegram.yaml    }
  Netflix:     {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Netflix/Netflix_Classical_No_Resolve.yaml ,         path: ./RuleSet/Telegram.yaml    }
  Global:      {<<: *a6 , url: https://cdn.jsdelivr.net/gh/Moli-X/Resources@main/Clash/Rules/Global.yaml ,                                 path: ./RuleSet/Global.yaml      }
  China:       {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@release/rule/Clash/China/China.yaml ,              path: ./RuleSet/China.yaml       }
  ProxyLite:   {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/ProxyLite/ProxyLite.yaml ,       path: ./RuleSet/ProxyLite.yaml   }
  ChinaIP:     {<<: *a7 , url: https://cdn.jsdelivr.net/gh/soffchen/GeoIP2-CN@release/clash-rule-provider.yml ,                            path: ./RuleSet/ChinaIP.yaml     }
  Advertising: {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Advertising/Advertising.yaml ,   path: ./RuleSet/Advertising.yaml }
  Hijacking:   {<<: *a6 , url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Hijacking/Hijacking.yaml ,       path: ./RuleSet/Hijacking.yaml   }


# 分流Policy 
rules:
  # > 应用分流
  - PROCESS-NAME,lync.exe,DIRECT
  - PROCESS-NAME,EXCEL.EXE,DIRECT
  - PROCESS-NAME,WINWORD.EXE,DIRECT
  - PROCESS-NAME,DIAInstaller.EXE,DIRECT
  - PROCESS-NAME,Update.exe,DIRECT
  - PROCESS-NAME,Microsoft Teams,DIRECT
  - PROCESS-NAME,Microsoft Edge,Microsoft
  - DOMAIN-KEYWORD,microsoft.com,Microsoft
  - DOMAIN-SUFFIX, edge.microsoft.com,Microsoft

  # > 小分流 Lan    - RULE-SET,Collection
  - RULE-SET,Direct,DIRECT
  - RULE-SET,Lan,DIRECT
  - RULE-SET,Download,DIRECT
  - RULE-SET,Apple,Apple
  - RULE-SET,Microsoft,Microsoft
  - RULE-SET,Steam,Steam
  - RULE-SET,Spotify,Spotify
  - RULE-SET,BiliBili,BiliBili
  - RULE-SET,OpenAI,美国节点
  - RULE-SET,Google,Proxies
  - RULE-SET,Github,Proxies
  - RULE-SET,Telegram,Proxies
  - RULE-SET,Netflix,Netflix
  - RULE-SET,ChinaIP,DIRECT
  - RULE-SET,ProxyLite,Proxies

  # > 大分流
  - RULE-SET,China,DIRECT
  - RULE-SET,Global,Proxies

  # > 去广告REJECT
  - RULE-SET,Anti,AdBlock
  - RULE-SET,Advertising,AdBlock
  - RULE-SET,Hijacking,AdBlock

  # > 单分流  - DOMAIN-SUFFIX , - DOMAIN-KEYWORD , ,no-resolve
  - GEOIP,CN,DIRECT
  - MATCH,Proxies             # 兜底分流


# TUN模式是通过在操作系统上安装一个虚拟网卡来实现的，它可以接管所有的网络流量，并将流量转发至Clash，然后由Clash发出请求
# Windows 系统中如何启用TUN模式
# 1、运行 Clash For Windows, 确保使用规则模式，并可以联网
# 2、点击 General中的Service Mode右侧的Manage按钮，在弹出窗口中选择schtasks，安装服务模式。安装完成后，应用程序会自动重启，Service Mode右侧的地球图标变为绿色表示安装成功
# 3、点击 General中的TUN Mode右侧的开关以启动TUN模式
